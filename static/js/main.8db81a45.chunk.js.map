{"version":3,"sources":["Crypto.js","index.js"],"names":["Crypto","useState","request","setRequest","search","setSearch","useEffect","fetch","then","res","json","data","console","log","filteredRequest","filter","req","name","toLowerCase","includes","symbol","className","type","placeholder","onChange","e","target","value","styke","map","element","key","src","image","alt","Intl","NumberFormat","style","currency","format","current_price","market_cap","market_cap_change_percentage_24h","color","id","rootElement","document","getElementById","ReactDOM","render"],"mappings":"gKAEe,SAASA,IACtB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAIAC,qBAAU,WACRC,MAHA,4HAIGC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,EAAMA,EAAK,IACvBR,EAAWQ,QAEd,IAEH,IAIMG,EAAkBZ,EAAQa,QAC9B,SAACC,GAAD,OACEA,EAAIC,KAAKC,cAAcC,SAASf,EAAOc,gBACvCF,EAAII,OAAOF,cAAcC,SAASf,EAAOc,kBAG7C,OACE,sBAAKG,UAAU,SAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,4DACA,+BACE,uBACEC,KAAK,OACLC,YAAY,WACZF,UAAU,aACVG,SAnBW,SAACC,GACpBpB,EAAUoB,EAAEC,OAAOC,eAsBjB,wBAAOC,MAAM,cAAb,UACE,+BACE,uCACA,oCACA,yCACA,uCACA,2CACA,0DAEDd,EAAgBe,KAAI,SAACC,EAASC,GAAV,OACnB,+BACE,6BACE,qBAAKC,IAAKF,EAAQG,MAAOC,IAAI,sBAE/B,oBAAIb,UAAU,iBAAd,SAAgCS,EAAQb,OACxC,6BAAKa,EAAQV,SACb,6BACGe,KAAKC,aAAa,QAAS,CAC1BC,MAAO,WACPC,SAAU,QACTC,OAAOT,EAAQU,iBAGpB,6BACGL,KAAKC,aAAa,QAAS,CAC1BC,MAAO,WACPC,SAAU,QACTC,OAAOT,EAAQW,cAGnBX,EAAQY,iCAAmC,EAC1C,6BACE,uBAAML,MAAO,CAAEM,MAAO,SAAtB,UACGb,EAAQY,iCADX,SAKF,6BACE,uBAAML,MAAO,CAAEM,MAAO,OAAtB,UACGb,EAAQY,iCADX,WA5BGZ,EAAQc,aC7C3B,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACjD,EAAD,MAEF6C,I","file":"static/js/main.8db81a45.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nexport default function Crypto() {\n  const [request, setRequest] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const url =\n    \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=brl&order=market_cap_desc&per_page=100&page=1&sparkline=false\";\n\n  useEffect(() => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data, data[0]);\n        setRequest(data);\n      });\n  }, []);\n\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const filteredRequest = request.filter(\n    (req) =>\n      req.name.toLowerCase().includes(search.toLowerCase()) ||\n      req.symbol.toLowerCase().includes(search.toLowerCase())\n  );\n\n  return (\n    <div className=\"crypto\">\n      <div className=\"inputContainer\">\n        <h2>Procure por sua moeda aqui</h2>\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"procurar\"\n            className=\"coin-input\"\n            onChange={handleChange}\n          />\n        </form>\n      </div>\n      <table styke=\"width: 100%\">\n        <tr>\n          <th>Image</th>\n          <th>Id</th>\n          <th>Apelido</th>\n          <th>Valor</th>\n          <th>MarketCap</th>\n          <th>Variação em 24h</th>\n        </tr>\n        {filteredRequest.map((element, key) => (\n          <tr key={element.id}>\n            <td>\n              <img src={element.image} alt=\"imagem da moeda\" />\n            </td>\n            <td className=\"name name-less\">{element.name}</td>\n            <td>{element.symbol}</td>\n            <td>\n              {Intl.NumberFormat(\"pt-br\", {\n                style: \"currency\",\n                currency: \"BRL\"\n              }).format(element.current_price)}\n            </td>\n            {/* Valor feito para alterar a modalidade do formato de como o preço vem */}\n            <td>\n              {Intl.NumberFormat(\"pt-br\", {\n                style: \"currency\",\n                currency: \"BRL\"\n              }).format(element.market_cap)}\n            </td>\n            {/* condicional caso o valor seja negativo , caso positivo, pintar de verde */}\n            {element.market_cap_change_percentage_24h > 0 ? (\n              <td>\n                <span style={{ color: \"green\" }}>\n                  {element.market_cap_change_percentage_24h}%\n                </span>\n              </td>\n            ) : (\n              <td>\n                <span style={{ color: \"red\" }}>\n                  {element.market_cap_change_percentage_24h}%\n                </span>\n              </td>\n            )}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Crypto from \"./Crypto\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <Crypto />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}